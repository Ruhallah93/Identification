    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset', type=str, default='datasets/Healthy_Older_People/',
                        help='the address of dataset directory')
    parser.add_argument('--n_classes', type=int, default=12, help='the number of classes')
    parser.add_argument('--features', nargs='+', type=str,
                        default=["X", "Y", "Z"],
                        help='the signals of original data')
    parser.add_argument('--sample_rate', type=int, default=1, help='the sampling rate of signals')
    parser.add_argument('--noise_rate', type=int, default=100,
                        help='the rate of noises injected to test data, over 100 means false')
    parser.add_argument('--epochs', type=int, default=50, help='the number of training epochs')
    parser.add_argument('--batch_size', type=int, default=32, help='the number of segments in each batch')
    parser.add_argument('--restore_best', type=int, default=1, help='for using regularization, 0 is False other True')
    parser.add_argument('--model', type=str, default='MULTI_CNN', help='MULTI_CNN|CNN_L|MLP|KNN|LR|RF|SVM')
    parser.add_argument('--data_length_time', type=int, default=-1, help='the data length for each class,-1 means all')
    parser.add_argument('--n_h_block', type=int, default=15, help='the number of all h blocks')
    parser.add_argument('--n_train_h_block', type=int, default=9, help='the number of h blocks to train network')
    parser.add_argument('--n_valid_h_block', type=int, default=2, help='the number of h blocks to validate network')
    parser.add_argument('--n_test_h_block', type=int, default=4, help='the number of h blocks to test network')
    parser.add_argument('--h_moving_step', type=int, default=1, help='moving test blocks rate in each iteration')
    parser.add_argument('--segments_times', nargs='+', type=int, default=[4], help='in seconds')
    parser.add_argument('--segments_overlaps', nargs='+', type=float, default=[0.75], help='percentage in [0,1]')
    parser.add_argument('--decision_times', nargs='+', type=int, default=[2 * 60], help='in seconds')
    parser.add_argument('--decision_overlaps', nargs='+', type=float, default=[0], help='percentage in [0,1]')
    opt = parser.parse_args()